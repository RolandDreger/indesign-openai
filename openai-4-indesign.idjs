/*
	Script: openai-4-indesign
	Version: 0.4.0;
	Date: 9.7.2023;
	App: Adobe InDesign CC2023+
	Description: OpenAI for InDesign;
	Author: Roland Dreger, www.rolanddreger.net;
	Licence: MIT;
*/
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// src/main.js
var app = global.app ?? __require("indesign").app;
var fs = __require("fs");
var uxpStorage = __require("uxp").storage;
var uxpLocalFileSystem = uxpStorage.localFileSystem;
var OPENAI_API_KEY = "YOUR_API_KEY";
var DIALOG_ID = "ai-dialog";
var DIALOG_STYLES = (
  /* css */
  `
	:root {
		/* color-scheme: light dark; */
		/* background-color: Canvas; */
		/* color: CanvasText; */
		--margin-right-offset: -40px;
	}
	dialog#${DIALOG_ID} {
		padding: 0;
		margin: 0;
		width: 100%;
		height: 100%;
	}
	sp-theme {
		display: flex;
		flex-direction: column;
		width: 100%;
		height: 100%;
		padding: 1.5rem 2rem 1rem 2rem;
		overflow: scroll;
	}
	sp-textarea {
		width: 100%;
	}
	sp-body {
		margin: 0;
		padding: 0;
	}
	#model-dropdown {
		width: 100%!important;
		flex-shrink: 0;
	}
	#model-menu {
		width: 100%;
	}
	#settings-group {
		flex-shrink: 0;
		display: flex;
		justify-content: space-between;
		margin-top: 0.5rem;
		gap: 2rem;
	}
	#settings-group > * {
		flex-grow: 1;
	}
	#settings-group > *:nth-child(n+2) {
		margin-left: 1rem;
	}
	#input-group {
		flex-shrink: 0;
		margin-top: 0.5rem;
	}
	#instruction-textarea-group {
		display: flex;
		flex-wrap: no-wrap;
		margin-top: 0.5rem;
	}
	#instruction-textarea {
		
	}
	#instruction-textarea-button-group {
		margin-right: var(--margin-right-offset);
	}
	#optional-input-textarea-group {
		display: flex;
		margin-top: 0.5rem;
	}
	#optional-input-textarea {
		
	}
	#optional-input-textarea-button-group {
		margin-right: var(--margin-right-offset);
	}
	#input-error-message {
		margin: 0.5rem;
		padding: 0;
		color: var(--spectrum-global-color-red-900, rgb(211, 21, 16));
	}
	#input-button-group {
		margin-top: 0.5rem;
	}
	#output-group {
		position: relative;
		flex-grow: 1;
		flex-shrink: 1;
	}
	#output-content-group {
		position: relative;
		height: 100%;
	}
	#output-textarea-group {
		display: none;
		position: relative;
		height: 100%;
	}
	#output-textarea-group.active {
		display: flex;
	}
	#output-textarea {
		
	}
	#output-textarea-button-group {
		margin-right: var(--margin-right-offset);
	}
	#output-image-group {
		display: none;
		height: 100%;
		overflow: hidden;
		align-items: center;
		justify-content: center;
		border-radius: 5px;
		background-color: rgba(255,255,255,0.1);
	}
	#output-image-group.active {
		display: flex;
	}
	#output-image {
		width: auto;
		max-width: 100%;
		max-height: 100%;
		object-fit: contain;
	}
	#choice-navi-group {
		flex-shrink: 0;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	#choice-label-separator {
		margin: 0 0.2rem;
	}
	#spinner-group {
		display: flex;
		justify-content: center;
		align-items: center;
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		border-radius: 5px;
		background-color: rgba(255,255,255,0.1);
	}
	#footer-button-group {
		flex-shrink: 0;
		display: flex;
		justify-content: space-between;
	}
	.hidden {
		visibility: hidden;
	}
`
);
var DIALOG_TEMPLATE = (
  /* html */
  `
	<sp-theme
		theme="sectrum"
		color="light"
		scale="medium"
		dir="ltr"
	>
		<sp-dropdown id="model-dropdown" placeholder="Model ..." style="width: 320px">
			<sp-menu id="model-menu" slot="options" selectedoptions="">
				<sp-menu-item value="gpt-3.5-turbo" selected>Completion (gpt-3.5-turbo)</sp-menu-item>
				<sp-menu-item value="text-davinci-edit-001">Text Modification (text-davinci-edit)</sp-menu-item>
				<!-- <sp-menu-item value="">Text Translation</sp-menu-item> -->
				<sp-menu-item value="images-generations">Text to Image</sp-menu-item>
				<!-- <sp-menu-divider></sp-menu-divider> -->
				<!-- <sp-menu-item value="">Image ALT Text</sp-menu-item> -->
			</sp-menu>
		</sp-dropdown>
		<div id="settings-group">
			<sp-slider id="n-slider" min="1" max="10" value="1">
				<sp-label slot="label">Number of Choices</sp-label>
			</sp-slider>
			<sp-slider id="temperature-slider" min="0" max="2" value="0.7" step="0.1">
				<sp-label slot="label">Temperature</sp-label>
			</sp-slider>
		</div>
		<div id="input-group">
			<sp-body>Instruction</sp-body>
			<div id="instruction-textarea-group">
				<sp-textarea id="instruction-textarea" placeholder="Please insert your instruction">
				</sp-textarea>
				<div id="instruction-textarea-button-group">
					<sp-action-button id="instruction-clear-button" quiet>
						<sp-icon name="ui:CrossSmall" size="s"></sp-icon>
					</sp-action-button>
				</div>
			</div>
			<div id="optional-input-textarea-group">
				<sp-textarea id="optional-input-textarea" placeholder="Optional Input">
				</sp-textarea>
				<div id="optional-input-textarea-button-group">
					<sp-action-button id="optional-input-clear-button" quiet>
						<sp-icon name="ui:CrossSmall" size="s"></sp-icon>
					</sp-action-button>
				</div>
			</div>
			<div id="input-button-group">
				<sp-button id="send-button">Send</sp-button>
			</div>
			<sp-label id="input-error-message">&nbsp;</sp-label>
		</div>
		<div id="output-group">
			<div id="output-content-group">
				<div id="output-textarea-group">
					<sp-textarea id="output-textarea" multiline="true" placeholder="Result">
					</sp-textarea>
					<div id="output-textarea-button-group">
						<sp-action-button id="transfer-result-button" quiet>
							<sp-icon name="ui:ArrowUpSmall" size="s"></sp-icon>
						</sp-action-button>
					</div>
				</div>
				<div id="output-image-group">
					<img id="output-image" src="" />
				</div>
			</div>
			<div id="spinner-group" class="hidden">
				<sp-body id="spinner" size="XL">Loading â€¦</sp-body>
			</div>
		</div>
		<div id="choice-navi-group">
			<sp-action-button id="prev-choice-button" class="hidden" quiet>
				<sp-icon name="ui:ChevronLeftLarge" size="l" slot="icon"></sp-icon>
			</sp-action-button>
			<sp-body id="current-choice" size="L"></sp-body>
			<sp-body id="choice-label-separator" size="L">/</sp-body>
			<sp-body id="number-of-choices" size="L"></sp-body>
			<sp-action-button id="next-choice-button" class="hidden" quiet>
				<sp-icon name="ui:ChevronRightLarge" size="l" slot="icon"></sp-icon>
			</sp-action-button>
		</div>
		<div id="footer-button-group">
			<sp-button id="close-button" variant="secondary">Close</sp-button>
			<sp-button id="insert-button">Insert</sp-button>
		</div>
	</sp-theme>
`
);
var handlerConfigArray = [
  { "id": "model-dropdown", "event": "change", "handler": modelChangeHandler },
  { "id": "instruction-clear-button", "event": "click", "handler": clearHandler },
  { "id": "optional-input-clear-button", "event": "click", "handler": clearHandler },
  { "id": "send-button", "event": "click", "handler": sendHandler },
  { "id": "transfer-result-button", "event": "click", "handler": transferResultHandler },
  { "id": "insert-button", "event": "click", "handler": insertHandler },
  { "id": "close-button", "event": "click", "handler": closeHandler },
  { "id": "prev-choice-button", "event": "click", "handler": prevChoiceHandler },
  { "id": "next-choice-button", "event": "click", "handler": nextChoiceHandler }
];
var CustomDialog = class {
  dialog;
  _choices = [];
  _index = -1;
  _type = "";
  constructor(id = "", styles = "", template = "", handlerConfigArray2 = [], apiKey = "") {
    this.id = id;
    this.styles = styles;
    this.template = template;
    this.eventHandlerItems = handlerConfigArray2;
    this.apiKey = apiKey;
    this.mount();
    this.init();
  }
  get index() {
    return this._index;
  }
  set index(i) {
    if (!i || i.constructor !== Number || i < 0) {
      this._index = 0;
    } else if (i >= this.choices.length) {
      this._index = this.choices.length - 1;
    } else {
      this._index = i;
    }
  }
  get length() {
    return this._choices.length;
  }
  get choices() {
    return this._choices;
  }
  set choices(arr) {
    if (!arr || !(arr instanceof Array)) {
      throw new Error("Property [choices] must be an array.");
    }
    this._choices = arr;
  }
  get type() {
    return this._type;
  }
  set type(type) {
    this._type = type;
  }
  mount() {
    const styleElem = document.createElement("style");
    const stylesTextNode = document.createTextNode(this.styles);
    styleElem.appendChild(stylesTextNode);
    document.head.appendChild(styleElem);
    const dialogElem = document.createElement("dialog");
    dialogElem.setAttribute("id", this.id);
    dialogElem.insertAdjacentHTML("beforeend", this.template);
    document.body.appendChild(dialogElem);
    this.dialog = dialogElem;
    this.eventHandlerItems.forEach((item) => {
      const handlerElem = document.getElementById(item.id) || document.querySelector(item.query);
      if (!handlerElem || !item.event || item.event.constructor !== String || !item.handler || !(item.handler instanceof Function)) {
        return false;
      }
      handlerElem.addEventListener(item.event, (evt) => {
        item.handler(evt, this);
      });
    });
    return this;
  }
  init() {
    const modelDropdownElem = document.getElementById("model-dropdown");
    const outputImageGroup = document.getElementById("output-image-group");
    const outputTextareaGroupElem = document.getElementById("output-textarea-group");
    const model = modelDropdownElem.value;
    switch (model) {
      case "images-generations":
        outputTextareaGroupElem.classList.remove("active");
        outputImageGroup.classList.add("active");
        this.type !== "" && this.type !== "text" ? this.setNavi() : this.resetNavi();
        break;
      default:
        outputTextareaGroupElem.classList.add("active");
        outputImageGroup.classList.remove("active");
        this.type === "text" ? this.setNavi() : this.resetNavi();
    }
    return this;
  }
  setNavi() {
    const prevChoiceButtonElem = document.getElementById("prev-choice-button");
    const nextChoiceButtonElem = document.getElementById("next-choice-button");
    const currentChoiceElem = document.getElementById("current-choice");
    const numberOfChoicesElem = document.getElementById("number-of-choices");
    if (this.index > 0) {
      prevChoiceButtonElem.classList.remove("hidden");
    } else {
      prevChoiceButtonElem.classList.add("hidden");
    }
    if (this.length > 1 && this.index > -1 && this.index < this.length - 1) {
      nextChoiceButtonElem.classList.remove("hidden");
    } else {
      nextChoiceButtonElem.classList.add("hidden");
    }
    currentChoiceElem.textContent = "" + (this.index + 1);
    numberOfChoicesElem.textContent = "" + this.length;
    return this;
  }
  resetNavi() {
    const prevChoiceButtonElem = document.getElementById("prev-choice-button");
    const nextChoiceButtonElem = document.getElementById("next-choice-button");
    const currentChoiceElem = document.getElementById("current-choice");
    const numberOfChoicesElem = document.getElementById("number-of-choices");
    prevChoiceButtonElem.classList.add("hidden");
    nextChoiceButtonElem.classList.add("hidden");
    currentChoiceElem.textContent = "0";
    numberOfChoicesElem.textContent = "0";
    return this;
  }
  async show(configObj = {}) {
    if (!this.dialog || !(this.dialog instanceof HTMLElement) || this.dialog.nodeName !== "DIALOG") {
      throw new Error("Dialog is not yet mounted!");
    }
    await this.dialog.showModal(configObj);
  }
};
async function sendHandler(evt, context) {
  if (!evt || !(evt instanceof Event)) {
    throw new Error("Argument [evt] must be an Event object!");
  }
  if (!context || !(context instanceof CustomDialog)) {
    throw new Error("Argument [context] must be an CustomDialog object!");
  }
  const modelDropdownElem = document.getElementById("model-dropdown");
  const nSlicerElem = document.getElementById("n-slider");
  const temperatureSlicerElem = document.getElementById("temperature-slider");
  const instructionTextareaElem = document.getElementById("instruction-textarea");
  const opionalInputTextareaElem = document.getElementById("optional-input-textarea");
  const errorMessageElem = document.getElementById("input-error-message");
  const sendButtonElem = document.getElementById("send-button");
  const outputContentGroupElem = document.getElementById("output-content-group");
  const outputTextareaElem = document.getElementById("output-textarea");
  const outputImageElem = document.getElementById("output-image");
  const spinnerContainerElem = document.getElementById("spinner-group");
  const openAIModel = modelDropdownElem.value;
  const instructionText = instructionTextareaElem.value;
  const editText = opionalInputTextareaElem.value || "";
  const temperature = parseFloat(temperatureSlicerElem.value);
  const n = parseInt(nSlicerElem.value);
  instructionTextareaElem.removeAttribute("invalid");
  errorMessageElem.textContent = "";
  if (instructionTextareaElem.value === "") {
    instructionTextareaElem.setAttribute("invalid", "");
    errorMessageElem.textContent = "The Instruction field must not be empty.";
    return false;
  }
  if (!navigator.onLine) {
    errorMessageElem.textContent = "No network connection available.";
    return false;
  }
  const { endpoint, sendDataObj } = getDataForRequest(openAIModel, editText, instructionText, temperature, n);
  if (!endpoint || !sendDataObj) {
    errorMessageElem.textContent = "Data for request not available.";
    return false;
  }
  if (Object.hasOwn(sendDataObj, "response_format")) {
    context.type = sendDataObj.response_format;
  } else {
    context.type = "text";
  }
  let sendData;
  try {
    sendData = JSON.stringify(sendDataObj);
  } catch (err) {
    console.error(err);
    errorMessageElem.textContent = err.message;
    return false;
  }
  sendButtonElem.setAttribute("disabled", "");
  spinnerContainerElem.classList.remove("hidden");
  outputContentGroupElem.classList.add("hidden");
  outputTextareaElem.value = "";
  context.choices = [];
  context.index = 0;
  let resultDataObj;
  try {
    resultDataObj = await send(endpoint, sendData, "POST", context.apiKey);
  } catch (err) {
    console.err(err);
    errorMessageElem.textContent = err.message;
    return false;
  } finally {
    sendButtonElem.removeAttribute("disabled");
    spinnerContainerElem.classList.add("hidden");
    outputContentGroupElem.classList.remove("hidden");
  }
  if (!resultDataObj || !(Object.hasOwn(resultDataObj, "choices") || Object.hasOwn(resultDataObj, "data"))) {
    errorMessageElem.textContent = "Request failed.";
    return false;
  }
  const dataChoiceArray = resultDataObj.choices || resultDataObj.data;
  if (!dataChoiceArray || !(dataChoiceArray instanceof Array) || dataChoiceArray.length === 0) {
    errorMessageElem.textContent = "No choices or image data in request data object.";
    return false;
  }
  dataChoiceArray.forEach((item) => {
    let itemText = item?.text || item?.message?.content;
    let url = item?.url;
    let base64 = item?.b64_json;
    if (itemText) {
      context.choices.push(itemText);
    } else if (url) {
      context.choices.push(url);
    } else if (base64) {
      context.choices.push("data:image/png;base64," + base64);
    }
  });
  switch (context.type) {
    case "text":
      outputTextareaElem.value = context.choices[context.index];
      break;
    case "url":
    case "b64_json":
      outputImageElem.src = context.choices[context.index];
      break;
    default:
      errorMessageElem.textContent = "Content type is invalid.";
  }
  context.setNavi();
  return true;
}
function getDataForRequest(openAIModel, editText, instructionText, temperature, n) {
  if (!openAIModel || openAIModel.constructor !== String) {
    console.warn("Argument [openAIModel] must be a string.", openAIModel);
    return {};
  }
  if (editText === null || editText === void 0 || editText.constructor !== String) {
    console.warn("Argument [editText] must be a string.", editText);
    return {};
  }
  if (!instructionText || instructionText.constructor !== String) {
    console.warn("Argument [instructionText] must be a string.", instructionText);
    return {};
  }
  if (temperature === null || temperature === void 0 || temperature.constructor !== Number || temperature < 0 || temperature > 2) {
    console.warn("Argument [temperature] must be a number between 0 and 2.", temperature);
    return {};
  }
  if (!n || n.constructor !== Number || n < 0) {
    console.warn("Argument [n] must be a positiv number.", n);
    return {};
  }
  let endpoint;
  let sendDataObj;
  switch (openAIModel) {
    case "text-davinci-edit-001":
      endpoint = "v1/edits";
      sendDataObj = {
        "model": "text-davinci-edit-001",
        "input": editText,
        "instruction": instructionText,
        "temperature": temperature,
        "n": n
      };
      break;
    case "gpt-3.5-turbo":
      let messageContent = instructionText.trim();
      if (editText.trim() !== "") {
        messageContent = messageContent.replace(/[:]$/, "") + ': """' + editText + '"""';
      }
      endpoint = "v1/chat/completions";
      sendDataObj = {
        "model": "gpt-3.5-turbo",
        "messages": [{ "role": "user", "content": messageContent }],
        "temperature": temperature,
        "n": n
      };
      break;
    case "images-generations":
      endpoint = "v1/images/generations";
      sendDataObj = {
        "prompt": instructionText,
        "n": n,
        "size": "1024x1024",
        /* 256x256 512x512 1024x1024 */
        "response_format": "b64_json"
      };
      break;
    default:
      console.warn("Model for data request object not correkt.");
  }
  return {
    endpoint,
    sendDataObj
  };
}
async function send(endpoint, sendData, method, apiKey) {
  if (!endpoint || endpoint.constructor !== String) {
    throw new Error("Argument [endpoint] must be a not empty string.");
  }
  if (sendData === null || sendData === void 0 || sendData.constructor !== String) {
    throw new Error("Argument [sendData] must be a string.");
  }
  if (!method || method.constructor !== String) {
    throw new Error("Argument [method] must be a not empty string.");
  }
  const BASE_URL = "https://api.openai.com";
  const url = new URL(endpoint, BASE_URL);
  let headers = new Headers();
  headers.append("Authorization", `Bearer ${apiKey}`);
  if (!!sendData) {
    headers.append("Content-Type", "application/json");
  }
  const request = new Request(url, {
    /* mode: "cors", */
    /* credentials: "include", */
    method,
    headers,
    body: sendData,
    redirect: "follow"
  });
  let respJsonObj = {};
  try {
    const resp = await fetch(request);
    if (resp.ok) {
      respJsonObj = await resp.json();
    } else {
      console.warn(`Fetch does not work. Status: ${resp.status}`);
      return null;
    }
  } catch (err) {
    console.error(err);
    return null;
  }
  return respJsonObj;
}
function modelChangeHandler(evt, context) {
  if (!evt || !(evt instanceof Event)) {
    throw new Error("Argument [evt] must be an Event object!");
  }
  if (!context || !(context instanceof CustomDialog)) {
    throw new Error("Argument [context] must be an CustomDialog object!");
  }
  context.init();
}
function clearHandler(evt, context) {
  if (!evt || !(evt instanceof Event)) {
    throw new Error("Argument [evt] must be an Event object!");
  }
  if (!context || !(context instanceof CustomDialog)) {
    throw new Error("Argument [context] must be an CustomDialog object!");
  }
  const textareaElem = evt.currentTarget.parentElement.parentElement.querySelector("sp-textarea");
  if (!textareaElem) {
    return false;
  }
  textareaElem.value = "";
}
function transferResultHandler(evt, context) {
  if (!evt || !(evt instanceof Event)) {
    throw new Error("Argument [evt] must be an Event object!");
  }
  if (!context || !(context instanceof CustomDialog)) {
    throw new Error("Argument [context] must be an CustomDialog object!");
  }
  const outputTextareaElemTextareaElem = document.getElementById("output-textarea");
  const optionalInputTextareaElem = document.getElementById("optional-input-textarea");
  optionalInputTextareaElem.value = outputTextareaElemTextareaElem.value;
  outputTextareaElemTextareaElem.value = "";
}
function prevChoiceHandler(evt, context) {
  if (!evt || !(evt instanceof Event)) {
    throw new Error("Argument [evt] must be an Event object!");
  }
  if (!context || !(context instanceof CustomDialog)) {
    throw new Error("Argument [context] must be an CustomDialog object!");
  }
  const outputTextareaElem = document.getElementById("output-textarea");
  const outputImageElem = document.getElementById("output-image");
  context.index -= 1;
  if (context.type === "text") {
    outputTextareaElem.value = context.choices[context.index];
  } else if (context.type === "url" || context.type === "b64_json") {
    outputImageElem.src = context.choices[context.index];
  }
  context.setNavi();
}
function nextChoiceHandler(evt, context) {
  if (!evt || !(evt instanceof Event)) {
    throw new Error("Argument [evt] must be an Event object!");
  }
  if (!context || !(context instanceof CustomDialog)) {
    throw new Error("Argument [context] must be an CustomDialog object!");
  }
  const outputTextareaElem = document.getElementById("output-textarea");
  const outputImageElem = document.getElementById("output-image");
  context.index += 1;
  if (context.type === "text") {
    outputTextareaElem.value = context.choices[context.index];
  } else if (context.type === "url" || context.type === "b64_json") {
    outputImageElem.src = context.choices[context.index];
  }
  context.setNavi();
}
async function insertHandler(evt, context) {
  if (!evt || !(evt instanceof Event)) {
    throw new Error("Argument [evt] must be an Event object!");
  }
  if (!context || !(context instanceof CustomDialog)) {
    throw new Error("Argument [context] must be an CustomDialog object!");
  }
  const errorMessageElem = document.getElementById("input-error-message");
  errorMessageElem.textContent = "";
  switch (context.type) {
    case "text":
      const outputTextareaElem = document.getElementById("output-textarea");
      await placeText(outputTextareaElem.value);
      break;
    case "url":
    case "b64_json":
      const outputImageElem = document.getElementById("output-image");
      await placeImage(outputImageElem.src, context.type);
      break;
    default:
      errorMessageElem.textContent = "Content type is invalid.";
  }
  context.dialog.close("insert");
}
function closeHandler(evt, context) {
  if (!evt || !(evt instanceof Event)) {
    throw new Error("Argument [evt] must be an Event object!");
  }
  if (!context || !(context instanceof CustomDialog)) {
    throw new Error("Argument [context] must be an CustomDialog object!");
  }
  context.dialog.close("Close");
}
function fillOptionalInputTextarea(openAIDialog2) {
  const optionalInputTextareaElem = openAIDialog2.dialog.querySelector("#optional-input-textarea");
  const selectedText = getSelectedText();
  optionalInputTextareaElem.value = selectedText;
  return true;
}
function base64ToArrayBuffer(base64String) {
  if (!base64String || base64String.constructor !== String) {
    throw new Error("Argument [base64String] must be a base64 string!");
  }
  var binaryString = atob(decodeURIComponent(base64String));
  var len = binaryString.length;
  var uint8Arr = new Uint8Array(len);
  for (var i = 0; i < len; i++) {
    uint8Arr[i] = binaryString.charCodeAt(i);
  }
  return uint8Arr.buffer;
}
function placeText(value) {
  if (!value || value.constructor !== String) {
    console.log("No value available for placing text in the InDesign document.");
    return false;
  }
  const textSelection = getTextSelection();
  if (!textSelection) {
    return false;
  }
  textSelection.contents = value;
}
function getTextSelection() {
  if (app.documents.length === 0 || app.layoutWindows.length === 0) {
    return null;
  }
  const selectionArray = app.selection;
  if (!selectionArray || !(selectionArray instanceof Array) || selectionArray.length === 0) {
    return null;
  }
  const firstSelection = selectionArray[0];
  if (!firstSelection || !("texts" in firstSelection) || !firstSelection.isValid) {
    return null;
  }
  return firstSelection;
}
function getSelectedText(defaultText = "") {
  let selectedText = defaultText;
  const textSelection = getTextSelection();
  if (!textSelection || !("texts" in textSelection) || !textSelection.isValid) {
    return selectedText;
  }
  const texts = textSelection.texts;
  if (!texts || !("item" in textSelection.texts)) {
    return selectedText;
  }
  const firstText = texts.item(0);
  if (!firstText || !("contents" in firstText)) {
    return selectedText;
  }
  selectedText = firstText.contents;
  return selectedText;
}
async function placeImage(src, type) {
  if (!src || src.constructor !== String) {
    console.log("No source available for placing image in the InDesign document.");
    return false;
  }
  if (!type || type.constructor !== String || !(type === "src" || type === "b64_json")) {
    throw new Error('Argument [type] must be a string! Valid values: "url" or "b64_json"');
  }
  let arrayBuffer;
  let fileExt = "png";
  switch (type) {
    case "url":
      const res = await fetch(src);
      if (!res.ok) {
        console.log("HTTP error, status", res.status);
        return false;
      }
      arrayBuffer = await res.arrayBuffer();
      break;
    case "b64_json":
      const srcSplitArray = src.split(";base64,");
      fileExt = srcSplitArray[0].replace(/^data:image\//, "");
      const base64String = srcSplitArray[1];
      arrayBuffer = base64ToArrayBuffer(base64String);
      break;
    default:
      return false;
  }
  const tempFolderPath = await uxpLocalFileSystem.getTemporaryFolder();
  const imageName = crypto.randomUUID() + "." + fileExt;
  const imagePath = tempFolderPath.nativePath + imageName;
  try {
    await fs.writeFile("file:" + imagePath, arrayBuffer);
  } catch (err) {
    console.error(err);
    return false;
  }
  let imageFrame = getGraphicSelection() || createGraphicFrame();
  if (!imageFrame) {
    console.warn("Could not create a frame for the image.");
    return false;
  }
  try {
    imageFrame.place(imagePath);
    imageFrame.fit(FitOptions.PROPORTIONALLY);
  } catch (err) {
    console.error(err);
    return false;
  }
  return true;
}
function createGraphicFrame() {
  if (app.documents.length === 0 || app.layoutWindows.length === 0) {
    return null;
  }
  const DEFAULT_GRAPHIC_X = 10;
  const DEFAULT_GRAPHIC_y = 10;
  const DEFAULT_GRAPHIC_HEIGHT = 100;
  const DEFAULT_GRAPHIC_WIDTH = 100;
  const targetPage = app.activeWindow.activePage;
  if (!targetPage || !targetPage.isValid) {
    return null;
  }
  let imageFrame;
  try {
    imageFrame = targetPage.rectangles.add();
  } catch (err) {
    console.error(err);
    return null;
  }
  if (!imageFrame || !imageFrame.isValid) {
    return null;
  }
  imageFrame.geometricBounds = [
    DEFAULT_GRAPHIC_X,
    DEFAULT_GRAPHIC_y,
    DEFAULT_GRAPHIC_HEIGHT,
    DEFAULT_GRAPHIC_WIDTH
  ];
  return imageFrame;
}
function getGraphicSelection() {
  if (app.documents.length === 0 || app.layoutWindows.length === 0) {
    return null;
  }
  const selectionArray = app.selection;
  if (!selectionArray || !(selectionArray instanceof Array) || selectionArray.length === 0) {
    return null;
  }
  const firstSelection = selectionArray[0];
  if (!firstSelection || !("graphics" in firstSelection) || !("place" in firstSelection) || !firstSelection.isValid) {
    return null;
  }
  return firstSelection;
}
var openAIDialog = new CustomDialog(DIALOG_ID, DIALOG_STYLES, DIALOG_TEMPLATE, handlerConfigArray, OPENAI_API_KEY);
fillOptionalInputTextarea(openAIDialog);
var dialogConfigObj = {
  "title": "OpenAI for InDesign",
  "resize": "both",
  /* "none", "both", "horizontal", "vertical" */
  "size": { "width": 400, "height": 670 }
};
await openAIDialog.show(dialogConfigObj);
